name: CI Pipeline

on:
  push:
    branches:
      - master

jobs:
  # -------------------------------
  # 1️⃣ Test job (Client only)
  # -------------------------------
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build test image
        run: docker build -f client/Dockerfile.dev -t test-image ./client

      - name: Run tests (client only)
        run: docker run -e CI=true test-image npm test

  # -------------------------------
  # 2️⃣ Build & Push Production Images
  # -------------------------------
  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [client, nginx, server, worker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Production Image
        run: |
          docker build \
            -f ./${{ matrix.service }}/Dockerfile \
            -t sahayavijay/fib-${{ matrix.service }}:latest \
            ./${{ matrix.service }}

      - name: Push the Image
        run: docker push sahayavijay/fib-${{ matrix.service }}:latest

  # -------------------------------
  # 3️⃣ Deploy to Elastic Beanstalk
  # -------------------------------
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install AWS Elastic Beanstalk CLI
        run: pip install awsebcli --upgrade --user

      - name: Deploy to Elastic Beanstalk
        run: |
          zip -r deploy.zip docker-compose.yml
          eb init "${{ secrets.EB_APP_NAME }}" --region ${{ secrets.AWS_REGION }} --platform "Docker running on 64bit Amazon Linux 2"
          eb use "${{ secrets.EB_ENV_NAME }}"
          eb deploy --staged
